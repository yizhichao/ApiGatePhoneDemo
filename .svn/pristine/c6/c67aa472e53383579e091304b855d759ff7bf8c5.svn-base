package com.hik.apigatephonedemo;

import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.SeekBar;

import com.hik.apigatephonedemo.utils.TimerUtil;

import org.MediaPlayer.PlayM4.Player;
import org.MediaPlayer.PlayM4.PlayerCallBack;

public class LocalRecPlay extends AppCompatActivity implements SurfaceHolder.Callback, View.OnClickListener,
        PlayerCallBack.PlayerDisplayCB, PlayerCallBack.PlayerPlayEndCB, PlayerCallBack.PlayerFileRefCB {

    private final String TAG = "LocalRecPlay";
    private SurfaceHolder surfaceHolder;
    private SurfaceView svPlay;
    private LocalRecPlayHandler mMessageHandler;
    /**
     * 定时器
     */
    private TimerUtil mTimer;
    /**
     * 播放文件时间更新消息标签
     */
    private final int PLAYLOCAL_PLAYTIME_UPDATE = 100;
    /**
     * 更新UI消息标签
     */
    private final int PLAYLOCAL_PLAYUI_UPDATE = 101;
    /**
     * 开始播放按钮
     */
    private Button startBtn;
    /**
     * 通道号
     */
    private int port;
    /**
     * SurfaceView上的按钮
     */
    private ImageButton btnCenterPlay;
    /**
     * 海康播放器
     */
    private Player player;
    /**
     * 录像总时长
     */
    private long fileTotalTime;
    /**
     * 播放进度条
     */
    private SeekBar sbPlayProgress;
    /**
     * 停止播放状态
     */
    private final int STATUS_STOP = 0;
    /**
     * 正在播放状态
     */
    private final int STATUS_PLAYING = 1;
    /**
     * 暂停播放状态
     */
    private final int STATUS_PAUSE = 2;
    /**
     * 当前播放的状态
     */
    private int mCurrentPlaybackStatus = STATUS_STOP;
    private long totalTime;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_local_rec_play);
        initData();
        initView();
        initPlayView();
    }

    @Override
    protected void onResume() {
        super.onResume();
        if (player == null) {
            player = Player.getInstance();
        }
    }

    @Override
    protected void onStop() {
        super.onStop();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        Log.e(TAG, "onDestroy……");
        player.stop(port);
        player.closeStream(port);
        player.closeFile(port);
        player.freePort(port);
    }

    private void initView() {
        svPlay = (SurfaceView) findViewById(R.id.surface);
        startBtn = (Button) findViewById(R.id.start);
        startBtn.setOnClickListener(this);
        btnCenterPlay = (ImageButton) findViewById(R.id.btnCenterPlay);
        btnCenterPlay.setOnClickListener(this);
        sbPlayProgress = (SeekBar) findViewById(R.id.sbPlayProgress);
    }

    private void initData() {
        mMessageHandler = new LocalRecPlayHandler();
    }

    private void initPlayView() {
        svPlay.getHolder().addCallback(this);
        sbPlayProgress.setProgress(0);
        sbPlayProgress.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                if (fromUser) {
//                    setPlayByPercent(progress);
//                    player.setDisplayCB(port, LocalRecPlay.this);
//                    player.setFileEndCB(port, LocalRecPlay.this);
//                    player.setFileRefCB(port, LocalRecPlay.this);
                }

            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {

//                player.setDisplayCB(port, LocalRecPlay.this);
//                player.setFileEndCB(port, LocalRecPlay.this);
//                player.setFileRefCB(port, LocalRecPlay.this);
            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {

//                player.setDisplayCB(port, LocalRecPlay.this);
//                player.setFileEndCB(port, LocalRecPlay.this);
//                player.setFileRefCB(port, LocalRecPlay.this);
            }
        });

    }

    private void cancelControlTimer() {
        if (null != mTimer) {
            mTimer.cancelTime();
        }

    }

    @Override
    public void surfaceCreated(SurfaceHolder surfaceHolder) {
        this.surfaceHolder = surfaceHolder;
    }

    @Override
    public void surfaceChanged(SurfaceHolder surfaceHolder, int i, int i1, int i2) {

    }

    @Override
    public void surfaceDestroyed(SurfaceHolder surfaceHolder) {
        this.surfaceHolder = null;
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.btnCenterPlay:
            case R.id.start:
//                startFilePlay("/sdcard/HIKVISION/Video6135.mp4");//大
//                                startFilePlay("/sdcard/HIKVISION/Video6459.mp4");//小
                                startFilePlay("/sdcard/HIKVISION/Video834.mp4");//中
//                startFilePlay("/sdcard/HIKVISION/Video5495.mp4");
                break;
            default:
                break;
        }
    }

    private void startFilePlay(String fileStr) {
        port = Player.getInstance().getPort();
        if (player == null) {
            player = Player.getInstance();
        }
        player.setDisplayCB(port, this);
        player.setFileEndCB(port, this);
        player.setFileRefCB(port, this);
        btnCenterPlay.setVisibility(View.INVISIBLE);
        player.openFile(port, fileStr);
        player.setStreamOpenMode(port, Player.STREAM_REALTIME);
        player.play(port, surfaceHolder);
        fileTotalTime = player.getFileTime(port);
        sbPlayProgress.setProgress(0);
        sbPlayProgress.setMax(100);
        Log.e(TAG, "录像时长：" + String.valueOf(fileTotalTime));
    }

    private void setSeekBarProgress(final float percent) {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                Log.e(TAG, "进度：" + percent);
                sbPlayProgress.setProgress((int) percent);
            }
        });

    }

    @Override
    public void onDisplay(int i, byte[] bytes, int i1, int i2, int i3, int i4, int i5, int i6) {
        Log.e(TAG, "正在播放……");
        sendMessage(102, null, 0);
    }

    @Override
    public void onFileRefDone(int i) {

    }

    @Override
    public void onPlayEnd(int i) {
        Log.e(TAG, "播放结束……");
        sendMessage(PLAYLOCAL_PLAYUI_UPDATE, null, null);
    }

    private class LocalRecPlayHandler extends Handler {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case PLAYLOCAL_PLAYTIME_UPDATE:
                    Bundle bundle = msg.getData();
                    Log.e(TAG, "播放进度："+bundle.getFloat("percent"));
                    setSeekBarProgress(bundle.getFloat("percent"));
                    break;
                case PLAYLOCAL_PLAYUI_UPDATE:
                    player.stop(port);
                    player.closeStream(port);
                    player.closeFile(port);
                    player.freePort(port);

                    Log.e(TAG, "播放结束1……");
                    sbPlayProgress.setProgress(0);
                    btnCenterPlay.setVisibility(View.VISIBLE);
                    Log.e(TAG, "播放结束2……");

                    break;
                case 102:
                    resumeTimer();
                    break;
                default:
                    break;
            }
        }
    }

    public void sendMessage(int caseId, Bundle data, Object object) {
        if (mMessageHandler == null) {
            Log.e(TAG, "sentMessage,param error,msgHandler is null");
            return;
        }
        Message msg = Message.obtain();
        msg.what = caseId;
        if (data != null) {
            msg.setData(data);
        }

        if (object != null) {
            msg.obj = object;
        }

        mMessageHandler.sendMessage(msg);
    }

    public void setPlayByPercent(int progress) {
        int percent = (int) (progress * totalTime);
        boolean isSuccess = player.setPlayedTimeEx(port, percent);
//        setSeekBarProgress(progress);
    }

    public void resumeTimer() {

        mCurrentPlaybackStatus = STATUS_PLAYING;
        int curPlayTime = player.getPlayedTimeEx(port);
        totalTime = player.getFileTime(port);
        float progress = (float) curPlayTime / (float) (totalTime * 1000);
        Bundle bundle = new Bundle();
        bundle.putFloat("percent",progress*100);
        sendMessage(PLAYLOCAL_PLAYTIME_UPDATE, bundle, null);

    }
}
